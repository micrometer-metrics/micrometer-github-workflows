plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'checkstyle'
    id 'pmd'
    alias(libs.plugins.javaformat)
    alias(libs.plugins.license)
    alias(libs.plugins.noHttp)
    alias(libs.plugins.pitest)
    alias(libs.plugins.jib)
    alias(libs.plugins.shadow)
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

group = 'io.micrometer.release'
println "I'm configuring $project.name with version $project.version"

sourceSets {
    e2eTest {
        java {
            destinationDirectory = project.layout.buildDirectory.dir('classes/java/e2eTest')
        }
        compileClasspath = sourceSets.test.compileClasspath + sourceSets.test.output
        runtimeClasspath = sourceSets.test.runtimeClasspath + sourceSets.test.output + files("${buildDir}/classes/java/e2eTest")
    }

    test {
        java {
            exclude '**/*E2e*.java'
        }
    }
}

dependencies {
    checkstyle libs.javaFormatForPlugins

    implementation libs.slf4j
    implementation libs.logback
    implementation libs.jacksonDatabind

    testImplementation platform(libs.junitBom)
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation libs.assertj
    testImplementation libs.archunit
    testImplementation libs.mockitoCore
    testImplementation libs.jacksonDatatype
    testImplementation libs.wiremock

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // PIT JUnit 5 plugin
    testImplementation libs.pitestJunit5

}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'io.micrometer.release.Main'
}

test {
    useJUnitPlatform() {
        excludeTags("e2e")
    }
}

tasks.register('e2e', Test) {
    description = 'Runs E2E tests.'
    group = 'verification'

    dependsOn e2eTestClasses

    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath

    // Show standard out and standard error of the test JVM(s)
    testLogging {
        showStandardStreams = true
        showExceptions = true
        showCauses = true
        showStackTraces = true
        exceptionFormat = 'FULL'
        events = ['PASSED', 'SKIPPED', 'FAILED', 'STANDARD_OUT', 'STANDARD_ERROR']
    }

    useJUnitPlatform() {
        includeTags("e2e")
    }
}

formatE2eTest.dependsOn("formatTest")

license {
    header rootProject.file('gradle/licenseHeader.txt')
    strictCheck true
    mapping {
        kt = 'SLASHSTAR_STYLE'
    }
    sourceSets = project.sourceSets

    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders = true
    exclude '**/*.json' // comments not supported
    exclude '**/*.txt' // comments not supported
}

// PMD plugin configuration
pmd {
    consoleOutput = true
    toolVersion = libs.versions.pmdTool.get()
    ruleSetFiles = files("${projectDir}/src/test/resources/ruleset.xml")
}

tasks.withType(Pmd) {
    reports {
        xml.required.set(false) // Disable XML reports
        html.required.set(true) // Enable HTML reports
    }
}

tasks.check {
    dependsOn(tasks.withType(Pmd))
}

pitest {
    junit5PluginVersion = libs.versions.pitestJunit5

    threads = 4 // Parallel threads for mutation testing
    outputFormats = ['HTML'] // Generate an HTML report
    timestampedReports = false // Avoid timestamped reports for consistent file paths
    testStrengthThreshold.set(80)
    mutationThreshold.set(75)
    setCoverageThreshold(80)
    excludedClasses.set(["io.micrometer.release.Main"])

    testSourceSets = [sourceSets.test]  // Only use the main test source set
}

build.dependsOn("pitest")

jib {
    from {
        image = "scratch" // Use an empty base image since we'll use a Dockerfile
    }
    to {
        image = System.getenv("DOCKER_HUB_REPO") ?: ''
        tags = [project.version]
        auth {
            username = System.getenv("DOCKER_HUB_USERNAME") ?: ""
            password = System.getenv("DOCKER_HUB_TOKEN") ?: ""
        }
    }
    container {
        jvmFlags = ["-Xms512m", "-Xmx1024m"]
        mainClass = "io.micrometer.release.Main"
    }
    extraDirectories {
        paths = file(".") // Ensure Dockerfile is included
    }
}

shadowJar {
    archiveBaseName.set("micrometer-release")
    archiveClassifier.set("") // Remove the "all" classifier
    archiveVersion.set("") // Remove the version from the JAR name
}
